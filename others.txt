3)
Самый простой способ выводить в логи время исполнения функций, запросов.
Также можно воспользоваться pdb и cProfile

4)
Клиент посылает изображение на сервер RED через REST API, получая на него ответ.
RED сохраняет в базе данных (например PostgreSQL)

Поля в БД:
===IMAGES===
id [INTEGER] - первичный ключ
date [TIMESTAMP] - дата загрузки картинки
filename [VARCHAR] - путь к изображению на сервере
red_score [INTEGER] - "красность" от 0 до 100
===Subscribers===
id [INTEGER] - первичный ключ
min_red_score [INTEGER] - минимальное количество красного для оповещения
webhook_server [VARCHAR] - Сервер для отправки уведомлений

Также RED кладет в очередь redis JSON-строки с полями указанными в IMAGES.

Сервер RED_STATS вынимает из очереди redis по очереди JSON-строки,
обращается к таблице Subscribers, для получения списка webhook-серверов,
куда нужно отправить уведомления, если превышен нужный порог "красности"
и отправляет уведомление нужным подписчикам, если это возможно.

В методе RED_STATS должны быть реализованы API-методы для получения статистики.
По этим методам идет обращение к БД для аггрегации данных по нужным параметрам.

Для ускорения работы БД, можно построить индексы по IMAGES.date, IMAGES.red_score



